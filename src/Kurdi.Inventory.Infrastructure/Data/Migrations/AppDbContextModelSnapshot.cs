// <auto-generated />
using System;
using Kurdi.Inventory.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kurdi.Inventory.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.CategoryAggregate.Category", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<bool>("Activation")
                        .HasColumnType("bit")
                        .HasColumnName("activation");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit")
                        .HasColumnName("is_parent");

                    b.Property<string>("ParentName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("parent");

                    b.HasKey("Name");

                    b.HasIndex("ParentName");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.CategoryAggregate.CategoryDetails", b =>
                {
                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("language_code");

                    b.Property<string>("TranslatedName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("translated_name");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("LanguageCode", "TranslatedName");

                    b.HasIndex("Name");

                    b.ToTable("categories_details");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.Language", b =>
                {
                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("language_code");

                    b.Property<bool>("Activation")
                        .HasColumnType("bit")
                        .HasColumnName("activation");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("language_name");

                    b.HasKey("LanguageCode");

                    b.ToTable("languages");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.ProductAggregate.Product", b =>
                {
                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("sku");

                    b.Property<bool>("Activation")
                        .HasColumnType("bit")
                        .HasColumnName("activation");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("category");

                    b.Property<int>("SupplierIdentity")
                        .HasColumnType("int")
                        .HasColumnName("supplier_identity");

                    b.HasKey("SKU");

                    b.HasIndex("CategoryName");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.ProductAggregate.ProductDetails", b =>
                {
                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("language_code");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("sku");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("LanguageCode", "Sku");

                    b.HasIndex("Sku");

                    b.ToTable("product_details");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.SalesOrderAggregate.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<double>("totalPrice")
                        .HasColumnType("float")
                        .HasColumnName("total_price");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("sales_orders");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.SalesOrderAggregate.SalesOrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CostPricePerItem")
                        .HasColumnType("float")
                        .HasColumnName("cost_price_per_item");

                    b.Property<double>("DiscountPerItem")
                        .HasColumnType("float")
                        .HasColumnName("discount_per_item");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("sku");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int")
                        .HasColumnName("sales_order_id");

                    b.Property<double>("SellingPricePerItem")
                        .HasColumnType("float")
                        .HasColumnName("selling_price_per_item");

                    b.Property<double>("SellingPricePerItemBeforeDiscount")
                        .HasColumnType("float")
                        .HasColumnName("selling_price_per_item_before_discount");

                    b.HasKey("Id");

                    b.HasIndex("SKU");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("sales_order_products");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.SalesOrderAggregate.SalesOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("sales_order_status");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.CategoryAggregate.Category", b =>
                {
                    b.HasOne("Kurdi.Inventory.Core.Entities.CategoryAggregate.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentName");

                    b.OwnsOne("Kurdi.Inventory.Core.Entities.TimeStamps", "TimeStamps", b1 =>
                        {
                            b1.Property<string>("CategoryName")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("created_at");

                            b1.Property<DateTime>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("deleted_at");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("updated_at");

                            b1.HasKey("CategoryName");

                            b1.ToTable("categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryName");
                        });

                    b.Navigation("Parent");

                    b.Navigation("TimeStamps");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.CategoryAggregate.CategoryDetails", b =>
                {
                    b.HasOne("Kurdi.Inventory.Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kurdi.Inventory.Core.Entities.CategoryAggregate.Category", "Category")
                        .WithMany("CategoryDetails")
                        .HasForeignKey("Name");

                    b.OwnsOne("Kurdi.Inventory.Core.Entities.TimeStamps", "TimeStamps", b1 =>
                        {
                            b1.Property<string>("CategoryDetailsLanguageCode")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("CategoryDetailsTranslatedName")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("created_at");

                            b1.Property<DateTime>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("deleted_at");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("updated_at");

                            b1.HasKey("CategoryDetailsLanguageCode", "CategoryDetailsTranslatedName");

                            b1.ToTable("categories_details");

                            b1.WithOwner()
                                .HasForeignKey("CategoryDetailsLanguageCode", "CategoryDetailsTranslatedName");
                        });

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("TimeStamps");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.Language", b =>
                {
                    b.OwnsOne("Kurdi.Inventory.Core.Entities.TimeStamps", "TimeStamps", b1 =>
                        {
                            b1.Property<string>("LanguageCode")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("created_at");

                            b1.Property<DateTime>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("deleted_at");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("updated_at");

                            b1.HasKey("LanguageCode");

                            b1.ToTable("languages");

                            b1.WithOwner()
                                .HasForeignKey("LanguageCode");
                        });

                    b.Navigation("TimeStamps");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.ProductAggregate.Product", b =>
                {
                    b.HasOne("Kurdi.Inventory.Core.Entities.CategoryAggregate.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryName");

                    b.OwnsOne("Kurdi.Inventory.Core.Entities.TimeStamps", "TimeStamps", b1 =>
                        {
                            b1.Property<string>("ProductSKU")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("created_at");

                            b1.Property<DateTime>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("deleted_at");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("updated_at");

                            b1.HasKey("ProductSKU");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductSKU");
                        });

                    b.OwnsOne("Kurdi.Inventory.Core.Entities.ProductAggregate.ProductPrices", "ProductPrices", b1 =>
                        {
                            b1.Property<string>("ProductSKU")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("CostPrice")
                                .HasColumnType("float")
                                .HasColumnName("cost_price");

                            b1.Property<double>("Discount")
                                .HasColumnType("float")
                                .HasColumnName("discount");

                            b1.Property<bool>("IsDiscounted")
                                .HasColumnType("bit")
                                .HasColumnName("is_discounted");

                            b1.Property<double>("SellingPrice")
                                .HasColumnType("float")
                                .HasColumnName("selling_price");

                            b1.HasKey("ProductSKU");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductSKU");
                        });

                    b.OwnsOne("Kurdi.Inventory.Core.Entities.ProductAggregate.ProductQuantity", "ProductQuantity", b1 =>
                        {
                            b1.Property<string>("ProductSKU")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("AvailableStock")
                                .HasColumnType("int")
                                .HasColumnName("available_stock");

                            b1.Property<int>("ReservedStock")
                                .HasColumnType("int")
                                .HasColumnName("reserved_stock");

                            b1.Property<int>("TotalStock")
                                .HasColumnType("int")
                                .HasColumnName("total_stock");

                            b1.HasKey("ProductSKU");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductSKU");
                        });

                    b.Navigation("Category");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductQuantity");

                    b.Navigation("TimeStamps");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.ProductAggregate.ProductDetails", b =>
                {
                    b.HasOne("Kurdi.Inventory.Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kurdi.Inventory.Core.Entities.ProductAggregate.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("Sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Kurdi.Inventory.Core.Entities.TimeStamps", "TimeStamps", b1 =>
                        {
                            b1.Property<string>("ProductDetailsLanguageCode")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("ProductDetailsSku")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("created_at");

                            b1.Property<DateTime>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("deleted_at");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("updated_at");

                            b1.HasKey("ProductDetailsLanguageCode", "ProductDetailsSku");

                            b1.ToTable("product_details");

                            b1.WithOwner()
                                .HasForeignKey("ProductDetailsLanguageCode", "ProductDetailsSku");
                        });

                    b.Navigation("Language");

                    b.Navigation("Product");

                    b.Navigation("TimeStamps");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.SalesOrderAggregate.SalesOrder", b =>
                {
                    b.HasOne("Kurdi.Inventory.Core.Entities.SalesOrderAggregate.SalesOrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.SalesOrderAggregate.SalesOrderProduct", b =>
                {
                    b.HasOne("Kurdi.Inventory.Core.Entities.ProductAggregate.Product", "Product")
                        .WithMany()
                        .HasForeignKey("SKU");

                    b.HasOne("Kurdi.Inventory.Core.Entities.SalesOrderAggregate.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderProducts")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.CategoryAggregate.Category", b =>
                {
                    b.Navigation("CategoryDetails");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.ProductAggregate.Product", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Kurdi.Inventory.Core.Entities.SalesOrderAggregate.SalesOrder", b =>
                {
                    b.Navigation("SalesOrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
